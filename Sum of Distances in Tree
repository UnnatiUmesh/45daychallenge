class Solution {
public:
    vector<int> dep;
    vector<int> sub;
    vector<int> sum;
    void dfs(vector<int> adj[],int u,int parent)
    {
       sub[u]=1;
        
        for(auto x:adj[u])
        {
            if(x==parent)
                continue;
            dep[x]=dep[u]+1;
            dfs(adj,x,u);
            sub[u]+=sub[x];
        }
        
    }
    void dfs2(vector<int> adj[],int u,int parent,int n)
    {
        for(auto x:adj[u])
        {
            if(x==parent)
                continue;
            sum[x]=sum[u]-sub[x]+(n-sub[x]);
            dfs2(adj,x,u,n);
        }
    }
    
    
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
     vector<int> adj[n];
     dep.resize(n+1);
     sub.resize(n+1);
     sum.resize(n);
        
     for(int i=0;i<edges.size();i++)
     {
         adj[edges[i][0]].push_back(edges[i][1]);
         adj[edges[i][1]].push_back(edges[i][0]);
     }
        
      dfs(adj,0,-1);
        
      for(int i=0;i<n;i++)
          sum[0]+=dep[i];
        
        dfs2(adj,0,-1,n);
        return sum;
        
    }
};
