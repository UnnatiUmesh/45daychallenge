class Solution{
public:

   //check for boundary where if 'O' is prsesnt it cannot be converted into 'X'
   void solve(vector<vector<char>> &mat,vector<vector<int>> &vis,int i,int j)
   {
       int n=mat.size();
       int m=mat[0].size();
       
       if(i>=n||i<0||j>=m||j<0||vis[i][j]||mat[i][j]=='X')
       return ;
       
       vis[i][j]=1;
       solve(mat,vis,i+1,j);
       solve(mat,vis,i-1,j);
       solve(mat,vis,i,j-1);
       solve(mat,vis,i,j+1);
   }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        // code here
        vector<vector<int>> vis(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++)
        {
            if(mat[i][0]=='O' && !vis[i][0])
            solve(mat,vis,i,0);
            
            if(mat[i][m-1]=='O'&& !vis[i][m-1])
            solve(mat,vis,i,m-1);
        }
        
        for(int j=0;j<m;j++)
        {
            if(mat[0][j]=='O' && !vis[0][j])
            solve(mat,vis,0,j);
            
            if(mat[n-1][j]=='O' &&!vis[n-1][j])
            solve(mat,vis,n-1,j);
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]=='O' && !vis[i][j])
                mat[i][j]='X';
            }
        }
        return mat;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n, m;
        cin>>n>>m;
        vector<vector<char>> mat(n, vector<char>(m, '.'));
        for(int i = 0;i < n;i++)
            for(int j=0; j<m; j++)
                cin>>mat[i][j];
        
        Solution ob;
        vector<vector<char>> ans = ob.fill(n, m, mat);
        for(int i = 0;i < n;i++) {
            for(int j = 0;j < m;j++) {
                cout<<ans[i][j]<<" ";
            }
            cout<<"\n";
        }
    }
    return 0;
}
