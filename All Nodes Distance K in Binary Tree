/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode *root,unordered_map<TreeNode *,TreeNode *> &mp)
    {
        queue<TreeNode *> q;
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode *temp=q.front();
            q.pop();
            
            if(temp->left)
            {
                mp[temp->left]=temp;
                q.push(temp->left);
            }
            if(temp->right)
            {
                mp[temp->right]=temp;
                q.push(temp->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        unordered_map<TreeNode *,TreeNode *> mp;
        solve(root,mp);
        
        vector<int> ans;
        unordered_map<TreeNode *,bool> vis;
        queue<TreeNode *> q;
        vis[target]=true;
        q.push(target);
        int curr=0;
        
        while(!q.empty())
        {
            int size=q.size();
            if(curr==k) break;
            curr++;
            
            for(int i=0;i<size;i++)
            {
            TreeNode *temp=q.front();
            q.pop();
            
            
            if(temp->left &&!vis[temp->left])
            {
                q.push(temp->left);
                vis[temp->left]=true;
            }
            if(temp->right && !vis[temp->right])
            {
                q.push(temp->right);
                vis[temp->right]=true;
            }
            if(mp[temp] && !vis[mp[temp]])
            {
                q.push(mp[temp]);
                vis[mp[temp]]=true;
            }
            }
        }
        while(!q.empty())
        {
           ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }
};
