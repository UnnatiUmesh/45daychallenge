/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *merge(ListNode *l1,ListNode *l2)
    {
        ListNode *dummy=new ListNode(-1);
        ListNode *curr=dummy;
        
        while(l1!=NULL && l2!=NULL)
        {
            if(l1->val<=l2->val)
            {
                curr->next=l1;
                l1=l1->next;
            }
            else
            {
                curr->next=l2;
                l2=l2->next;
            }
            curr=curr->next;
        }
        while(l1!=NULL)
        {
             curr->next=l1;
            l1=l1->next;
             curr=curr->next;
        }
        while(l2!=NULL)
        {
             curr->next=l2;
            l2=l2->next;
            curr=curr->next;
        }
        curr->next=NULL;
        return dummy->next;
    }
    ListNode *findmiddle(ListNode *head)
    {
        if(head==NULL||head->next==NULL)
            return head;
        ListNode *slow=head,*fast=head->next;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    
    ListNode *mergeSort(ListNode *head)
    {
        if (head == NULL || head->next == NULL)
        return head;

    ListNode *middle = findmiddle(head);
    ListNode *left=head;
    ListNode *right=middle->next;
    middle->next=NULL;
        
        left=mergeSort(left);
        right=mergeSort(right);
        return merge(left,right);
    }
    
    ListNode* sortList(ListNode* head) {
        return mergeSort(head);
    }
};
