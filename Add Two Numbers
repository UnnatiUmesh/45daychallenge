/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode *head)
    {
          if(head==NULL||head->next==NULL)
            return head;
      ListNode *prev=head,*curr;
      ListNode *temp=head->next;
        
        
      
      while(temp!=NULL)
      {
          curr=temp->next;
          temp->next=prev;
          prev=temp;
          temp=curr;
      }
        head->next=NULL;
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode *dummy=new ListNode(-1);
        ListNode *curr=dummy;
        int c=0;
        
        while(l1!=NULL && l2!=NULL)
        {
            int sum=l1->val+l2->val+c;
          
            c=sum/10;
            sum=sum%10;
            
            curr->next=new ListNode(sum);
            curr=curr->next;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=NULL)
        {
            int sum=l1->val+c;
           
            c=sum/10;
            sum=sum%10;
            
            curr->next=new ListNode(sum);
            curr=curr->next;
            l1=l1->next;
        }
         while(l2!=NULL)
        {
            int sum=l2->val+c;
          
            c=sum/10;
             sum=sum%10;
            
            curr->next=new ListNode(sum);
            curr=curr->next;
            l2=l2->next;
        }
        
        if(c!=0)
            curr->next=new ListNode(c);
        
        return dummy->next;
        
    }
};
